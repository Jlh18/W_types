import category_theory.over
import category_theory.limits.shapes.pullbacks
import category_theory.adjunction.over

universes u‚ÇÄ v‚ÇÄ

noncomputable theory

namespace category_theory

open limits

section pullback_functor

variables {C : Type u‚ÇÄ} [category.{v‚ÇÄ} C] [has_pullbacks C] {X Y : C}
/-
Pullback extends to a functor between over categories.
For the morphism map consider the following diagram
which uses `pullback.map`

            i.left
    E‚ÇÄ.left ‚ü∂ E‚ÇÅ.left
        ‚Üò        ‚Üò
          Y  ‚îÄ‚îÄùüô‚ü∂   Y
        ‚Üó        ‚Üó
      X     ‚ü∂   X
           ùüô

-/
/-- Pullback as a functor between over categories (also called base_change) -/
@[simps] def pullback_functor (f : X ‚ü∂ Y) : over Y ‚•§ over X :=
{ obj := Œª g, over.mk (pullback.snd : (pullback g.hom f) ‚ü∂ X),
  map := Œª g‚ÇÄ g‚ÇÅ i, over.hom_mk (pullback.map _ _ _ _ i.left (ùüô _) (ùüô _) (by simp) (by simp)) (by simp) }

notation g `^*`:80 := pullback_functor g

end pullback_functor

namespace over

namespace terminal

variables {C : Type u‚ÇÄ} [category.{v‚ÇÄ} C] [has_terminal C]

/-
If category `C` has a terminal object then
`C` and `over ‚ä§_ C` (the overcategory of the terminal object)
are equivalent categories via the forgetful functor.
-/

/--
The inverse to the functor forgetting from the over category of the terminal object.
This leads to an equivalence in `is_equivalence_forget`.
-/
@[simp] def forget_inverse : C ‚•§ over ‚ä§_ C :=
{ obj := Œª X, over.mk (terminal.from X),
    map := Œª X Y f, over.hom_mk f (by tidy) }

/-- On objects, the identity on `over ‚ä§_ C` is equal to the composition with `forget_inverse` -/
@[simp] def unit_iso_obj (X : over ‚ä§_ C) :
  X ‚âÖ (over.forget (‚ä§_ C) ‚ãô forget_inverse).obj X :=
eq_to_iso (by {cases X, congr, tidy})

/-- The identity on `over ‚ä§_ C` is naturally isomorphic to the composition with `forget_inverse` -/
def unit_iso : ùü≠ (over (‚ä§_ C)) ‚âÖ over.forget (‚ä§_ C) ‚ãô forget_inverse :=
nat_iso.of_components (Œª X, unit_iso_obj X) (by tidy)

/-- The precomposition with the `forget_inverse` is naturally isomorphic to the identity on C -/
def counit_iso : forget_inverse ‚ãô over.forget (‚ä§_ C) ‚âÖ ùü≠ C :=
nat_iso.of_components (Œª X, iso.refl _) (by tidy)

/-- The forgetful functor `over ‚ä§_ C ‚Üí C` is an equivalence, with inverse `forget_inverse` -/
def is_equivalence_forget : is_equivalence (over.forget ‚ä§_ C) :=
is_equivalence.mk forget_inverse unit_iso counit_iso

variable [has_binary_products C]

/-- `forget_inverse` is naturally isomorphic to the general left adjoint to `over.forget` -/
def forget_inverse_iso_star : forget_inverse ‚âÖ category_theory.star ‚ä§_ C :=
nat_iso.of_components
  (Œª _, over.iso_mk (prod.left_unitor _).symm) -- X ‚âÖ ‚ä§_ C ‚®Ø X
  (by tidy)

end terminal

end over

--- The actual file

variables {C : Type u‚ÇÄ} [category.{v‚ÇÄ} C] [has_pullbacks C] (W X Y Z : C)

/--
The data of a polynomial functor expressed as morphisms in a category with adjunction conditions.

     f     g     h
  W ‚Üê- X -‚Üí Y -‚Üí Z

The functor in question is then between over categories

         f^*                 Œ†g                        Œ£h
      (pullback)    (right adjoint to g^*)  (left adjoint to h^*)
  C/W   =====‚•§  C/X      ========‚•§      C/Y    =========‚•§    C/Z

Œ£h always exists and is called `over.map`.
-/
structure polynomial :=
(f : X ‚ü∂ W)
(g : X ‚ü∂ Y)
(g_adj : is_left_adjoint (g^*))
(h : Y ‚ü∂ Z)

namespace polynomial

variables {W X Y Z} (P : polynomial W X Y Z)

/-- The right adjoint to g^* from the polynomial. This is Œ†g in the literature -/
def g_right : over X ‚•§ over Y := @is_left_adjoint.right _ _ _ _ (P.g^*) P.g_adj

/-
The left adjoint to `h^*` is `over.map P.h`. This is `Œ£g` in the literature.
The adjunction is given in `over_map_adj_pullback_functor`
-/
/-- The polynomial functor associated to the data of `category_theory.polynomial` -/
def functor : over W ‚•§ over Z := P.f^* ‚ãô P.g_right ‚ãô over.map P.h

end polynomial





end category_theory
